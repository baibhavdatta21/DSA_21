#include <bits/stdc++.h>

//Optimisations (Black Magic)
// #pragma GCC optimize("O3,unroll-loops")
// #pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds1;
typedef tree<int, null_type, greater<int>, rb_tree_tag, tree_order_statistics_node_update> pbds2;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> pbds3;
// set++,Extras->1.find_by_order("index(0-based)") && 2.order_of_key("value")

#define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define int  long long  
//#define double long double
#define endl "\n"
#define pb push_back

int gcd(int a , int b){if(b==0) return a;return gcd(b,(a%b));}
int lcm(int a, int b){return ((a*b)/gcd(a,b));}

/*-----------------------------------------------------------------------------------------------------*/
/*    * +-------+-----------------+
     * |  n    | Worst Algorithm |
     * +-------+-----------------+
     * | 11    | O(n!), O(n^6)   |
     * | 18    | O(2^n * n^2)    |
     * | 22    | O(2^n * n)      | 
     * | 100   | O(n^4)          |
     * | 10^2  | O(n^3)          |
     * | 10^3  | O(n^2 log n)    |
     * | 10^4  | O(n^2)          |
     * | 10^6  | O(n log n)      |
     * | 10^7  | O(n)            |
     * +-------+-----------------+
    =>Calm down, Baaal tae chire nebe CF.
    =>Giving up is not an option, you are just that little thought away.
    =>Think of Binary Search

*/

class Disjoint_set{
public:
    vector<int>rank;
    vector<int>par;

    Disjoint_set(int n){
        rank.resize(n+1,1);
        par.resize(n+1,1);
        for(int i=0;i<n+1;i++){
            par[i]=i;
        }
    }
    int find_par(int i){
        if(i==par[i])
            return i;

        return par[i]=find_par(par[i]);
    }
    void uni(int u1,int v1){
        int u=par[u1];
        int v=par[v1];
        if(u==v){
            return;
        }
        if(rank[u]>rank[v]){
            par[v]=u;
        }
        else if(rank[u]<rank[v]){
            par[u]=v;
        }
        else{
            par[u]=v;
            rank[v]++;
        }

    }
    void print(){
        for(auto it:par){
            cout<<it<<" ";
        }
        cout<<endl;

        for(auto it:rank){
            cout<<it<<" ";
        }
        cout<<endl;
    }
};
void solver()
{
    Disjoint_set ds(7);

    ds.uni(1,2);
    ds.uni(1,3);
    ds.uni(5,4);
    ds.uni(5,7);
    ds.uni(4,6);
    
    if(ds.find_par(1)==ds.find_par(2)){
        cout<<"same1"<<endl;
    }
    if(ds.find_par(1)==ds.find_par(7)){
        cout<<"same2"<<endl;
    }
    ds.uni(3,7);
    if(ds.find_par(1)==ds.find_par(7)){
        cout<<"same3"<<endl;
    }
    ds.print();
}

signed main()
{
    fastIO;
#ifndef ONLINE_JUDGE
        freopen("in.txt","r",stdin);
        freopen("out.txt","w",stdout);
#endif 
   
    int t=1;
    //cin>>t;
    //build();
    while(t--)
    {
        solver();
    }  
    return 0;
}
or


https://takeuforward.org/data-structure/disjoint-set-union-by-rank-union-by-size-path-compression-g-46/
