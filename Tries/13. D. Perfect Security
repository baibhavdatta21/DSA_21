https://codeforces.com/contest/948/problem/D

It feels like that in cp mostly xor with tries are used.
here is one example.


#include <bits/stdc++.h>
 
//Optimisations (Black Magic)
// #pragma GCC optimize("O3,unroll-loops")
// #pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
 
using namespace std;
using namespace __gnu_pbds;
 
typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;// set++,Extras->1.find_by_order("index(0-based)") && 2.order_of_key("value")
typedef tree<int, null_type, greater<int>, rb_tree_tag, tree_order_statistics_node_update> pbds1;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> pbds2;
 
#define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define int  long long  
#define endl "\n"
#define pb push_back
 
int gcd(int a , int b){if(b==0) return a;return gcd(b,(a%b));}
int lcm(int a, int b){return ((a*b)/gcd(a,b));}
 
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
class Node{
public:
    vector<Node*>links;
    int count;
    Node(){
        links.resize(2);
        count=0;
    }
};
void insert(int val,Node* dum){
    for(int i=31;i>=0;i--){
        if(dum->links[(val>>i)&1]==NULL)
            dum->links[(val>>i)&1]=new Node;
        dum=dum->links[(val>>i)&1];
        dum->count++;
    }
}
void del(int val,Node* dum){
    for(int i=31;i>=0;i--){
        dum=dum->links[(val>>i)&1];
        dum->count--;
        // if((dum->count)==0){
        //     dum->links[(val>>i)&1]=NULL;
        //     break;
        //}   
    }
}
pair<int,int> solver(int val,Node* dum){
    int mini=0;
    int number=0;
    for(int i=31;i>=0;i--){
        int want=(val>>i)&1;
        //cout<<want<<endl;
        if(dum->links[want]!=NULL && dum->links[want]->count!=0){
            dum=dum->links[want];
            mini+=want*pow(2,i);
        }
        else{
            dum=dum->links[1-want];
            mini+=(1-want)*pow(2,i);
        }
        //number+=want*pow(2,i);
        //cout<<number<<" "<<mini<<endl;
    }
    return {mini,number};
}
void solver()
{    
    int n;
    cin>>n;
    vector<int>v1(n);
    vector<int>v2(n);
    for(int i=0;i<n;i++)
        cin>>v1[i];
    for(int i=0;i<n;i++)
        cin>>v2[i];
    Node* root=new Node();
    for(int i=0;i<n;i++){
        insert(v2[i],root);
    }    
    //cout<<"ok"<<endl;
    //cout<<(7^7)<<endl;
    for(int i=0;i<n;i++){
        auto it=solver(v1[i],root);
       //cout<<it.first<<" "<<it.second;
        //cout<<it.first<<endl;
        int x=(it.first^v1[i]);
        cout<<x<<" ";
       del(it.first,root);
    }
    cout<<endl;
 
}
signed main()
{
    fastIO;
#ifndef ONLINE_JUDGE
        freopen("in.txt","r",stdin);
        freopen("out.txt","w",stdout);
#endif 
    int t=1;
    //cin>>t;
    while(t--)
    {
        solver();
    }  
    return 0;
}
