problem link->https://leetcode.com/problems/word-break/

trie+dp

Dp part is imp
Tc->O(N*M)
SC->O(N*M)

class Node
{
    public:
    Node* links[26];
    int end=0;
};
class Solution {
public:
    void insert(Node* root,vector<string>& word)
    {
        Node* dum=root;
        int n=word.size();
        for(int i=0;i<n;i++)
        {
            Node* dum2=dum;
            for(int j=0;j<word[i].size();j++)
            {
                if(dum2->links[word[i][j]-'a']==NULL)
                {
                       //cout<<word[i][j]<<endl;
                      dum2->links[word[i][j]-'a']=new Node();
                }
                dum2=dum2->links[word[i][j]-'a'];
            }
            dum2->end=1;
        }
    }
    bool wordBreak(string s, vector<string>& wordDict) 
    {
        Node*root=new Node();
        insert(root,wordDict);
        int n=s.size();
        vector<int>dp(n+1,0);
        dp[0]=1;
        Node* dum=root;
        for(int i=0;i<n;i++)
        {
            if(dp[i]==1)
            {
                Node* dum2=dum;
                for(int j=i;j<n;j++)
                {
                    
                    if(dum2->links[s[j]-'a']!=NULL)
                    {
                        
                        dum2=dum2->links[s[j]-'a'];
                    }
                    else 
                        break;
                    if(dum2->end==1)
                        dp[j+1]=1;
                }
                
            }
        }
        // for(int i=0;i<=n;i++)
        //     cout<<dp[i]<<endl;
        return dp[n];
    }
};
